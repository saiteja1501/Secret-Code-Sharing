import org.json.JSONObject;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;

public class SecretSharing {

    public static void main(String[] args) {
        String testCase1 = "testcase1.json";  // Path to the first JSON test case file
        String testCase2 = "testcase2.json";  // Path to the second JSON test case file

        try {
            BigInteger secret1 = findSecret(testCase1);
            BigInteger secret2 = findSecret(testCase2);

            System.out.println("Secret for Test Case 1: " + secret1);
            System.out.println("Secret for Test Case 2: " + secret2);
        } catch (Exception e) {
            System.err.println("An error occurred: " + e.getMessage());
        }
    }

    private static BigInteger findSecret(String filePath) throws IOException {
        // Read JSON file and parse it into a JSONObject
        String content = new String(Files.readAllBytes(Paths.get(filePath)));
        JSONObject json = new JSONObject(content);

        // Extract keys n and k
        JSONObject keys = json.getJSONObject("keys");
        int n = keys.getInt("n");
        int k = keys.getInt("k");

        // Prepare lists for Lagrange interpolation
        List<BigInteger> xValues = new ArrayList<>();
        List<BigInteger> yValues = new ArrayList<>();

        // Extract points and decode y-values
        for (String key : json.keySet()) {
            if (key.equals("keys")) continue;

            int x = Integer.parseInt(key);
            JSONObject point = json.getJSONObject(key);
            int base = point.getInt("base");
            String value = point.getString("value");

            // Decode y-value based on its base
            BigInteger y = new BigInteger(value, base);
            xValues.add(BigInteger.valueOf(x));
            yValues.add(y);

            // We only need 'k' points for interpolation
            if (xValues.size() == k) break;
        }

        // Ensure we have enough points for interpolation
        if (xValues.size() < k) {
            throw new IllegalArgumentException("Insufficient points provided for interpolation. Minimum required: " + k);
        }

        // Use Lagrange interpolation to find the constant term c
        return lagrangeInterpolation(BigInteger.ZERO, xValues, yValues);
    }

    private static BigInteger lagrangeInterpolation(BigInteger x, List<BigInteger> xValues, List<BigInteger> yValues) {
        BigInteger result = BigInteger.ZERO;
        int k = xValues.size();

        for (int i = 0; i < k; i++) {
            BigInteger term = yValues.get(i);
            for (int j = 0; j < k; j++) {
                if (i != j) {
                    BigInteger numerator = x.subtract(xValues.get(j));
                    BigInteger denominator = xValues.get(i).subtract(xValues.get(j));

                    // Modular inverse to avoid division by zero and ensure integer division
                    denominator = denominator.modInverse(BigInteger.TWO.pow(256)); // Approximation with a large prime field
                    term = term.multiply(numerator).multiply(denominator);
                }
            }
            result = result.add(term);
        }

        return result;
    }
}
